import { INodeType, INodeTypeDescription } from 'n8n-workflow';

export class Vuela implements INodeType {
	description: INodeTypeDescription = {
		displayName: 'Vuela AI',
		name: 'vuela',
		icon: 'file:vuela.svg',
		group: ['transform'],
		version: 1,
		subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
		description: 'Generate AI-powered content and videos with Vuela - Created by VA360.pro',
		defaults: {
			name: 'Vuela AI',
		},
		inputs: ['main'],
		outputs: ['main'],
		credentials: [
			{
				name: 'vuelaApi',
				required: true,
			},
		],
		requestDefaults: {
			baseURL: 'https://api.vuela.ai',
			headers: {
				Accept: 'application/json',
				'Content-Type': 'application/json',
			},
		},
		properties: [
			// Resource Selection
			{
				displayName: 'Resource',
				name: 'resource',
				type: 'options',
				noDataExpression: true,
				options: [
					{
						name: 'Authentication',
						value: 'auth',
					},
					{
						name: 'Content',
						value: 'content',
					},
					{
						name: 'Project',
						value: 'project',
					},
					{
						name: 'Video',
						value: 'video',
					},
				],
				default: 'content',
			},

			// Operations for Authentication
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['auth'],
					},
				},
				options: [
					{
						name: 'Validate Token',
						value: 'validateToken',
						description: 'Validate your API token',
						action: 'Validate API token',
						routing: {
							request: {
								method: 'POST',
								url: '/generate/validate-token',
							},
						},
					},
				],
				default: 'validateToken',
			},

			// Operations for Content
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['content'],
					},
				},
				options: [
					{
						name: 'Generate Article',
						value: 'generateArticle',
						description: 'Generate an AI-powered article',
						action: 'Generate article',
						routing: {
							request: {
								method: 'POST',
								url: '/generate/article',
							},
						},
					},
					{
						name: 'Get',
						value: 'get',
						description: 'Get a specific content by ID',
						action: 'Get content',
						routing: {
							request: {
								method: 'GET',
								url: '=/my-content/{{$parameter["contentId"]}}',
							},
						},
					},
					{
						name: 'Get Many',
						value: 'getMany',
						description: 'Get multiple contents',
						action: 'Get many contents',
						routing: {
							request: {
								method: 'GET',
								url: '/my-content',
							},
						},
					},
				],
				default: 'generateArticle',
			},

			// Operations for Video
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['video'],
					},
				},
				options: [
					{
						name: 'Generate',
						value: 'generate',
						description: 'Generate an AI-powered video',
						action: 'Generate video',
						routing: {
							request: {
								method: 'POST',
								url: '/generate/video',
							},
						},
					},
					{
						name: 'Get',
						value: 'get',
						description: 'Get a specific video by ID',
						action: 'Get video',
						routing: {
							request: {
								method: 'GET',
								url: '=/my-videos/{{$parameter["videoId"]}}',
							},
						},
					},
					{
						name: 'Get Many',
						value: 'getMany',
						description: 'Get multiple videos',
						action: 'Get many videos',
						routing: {
							request: {
								method: 'GET',
								url: '/my-videos',
							},
						},
					},
				],
				default: 'generate',
			},

			// Operations for Project
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['project'],
					},
				},
				options: [
					{
						name: 'Get',
						value: 'get',
						description: 'Get a specific project by ID',
						action: 'Get project',
						routing: {
							request: {
								method: 'GET',
								url: '=/my-projects/{{$parameter["projectId"]}}',
							},
						},
					},
					{
						name: 'Get Many',
						value: 'getMany',
						description: 'Get multiple projects',
						action: 'Get many projects',
						routing: {
							request: {
								method: 'GET',
								url: '/my-projects',
							},
						},
					},
				],
				default: 'getMany',
			},

			// Fields for Generate Article
			{
				displayName: 'Title',
				name: 'title',
				type: 'string',
				default: '',
				description: 'Title of the article to generate. Either title or keyword must be provided.',
				displayOptions: {
					show: {
						resource: ['content'],
						operation: ['generateArticle'],
					},
				},
				routing: {
					send: {
						type: 'body',
						property: 'title',
					},
				},
			},
			{
				displayName: 'Keyword',
				name: 'keyword',
				type: 'string',
				default: '',
				description: 'Main keyword for the article. Either title or keyword must be provided.',
				displayOptions: {
					show: {
						resource: ['content'],
						operation: ['generateArticle'],
					},
				},
				routing: {
					send: {
						type: 'body',
						property: 'keyword',
					},
				},
			},
			{
				displayName: 'Language',
				name: 'language',
				type: 'options',
				default: 'en',
				options: [
					{ name: 'English', value: 'en' },
					{ name: 'Spanish', value: 'es' },
					{ name: 'French', value: 'fr' },
					{ name: 'German', value: 'de' },
					{ name: 'Italian', value: 'it' },
					{ name: 'Portuguese', value: 'pt' },
				],
				description: 'Language for the article',
				displayOptions: {
					show: {
						resource: ['content'],
						operation: ['generateArticle'],
					},
				},
				routing: {
					send: {
						type: 'body',
						property: 'language',
					},
				},
			},
			{
				displayName: 'Country',
				name: 'country',
				type: 'string',
				default: 'US',
				description: 'Target country code (e.g., US, UK, ES)',
				displayOptions: {
					show: {
						resource: ['content'],
						operation: ['generateArticle'],
					},
				},
				routing: {
					send: {
						type: 'body',
						property: 'country',
					},
				},
			},

			// Additional Fields for Generate Article
			{
				displayName: 'Additional Fields',
				name: 'additionalFields',
				type: 'collection',
				placeholder: 'Add Field',
				default: {},
				displayOptions: {
					show: {
						resource: ['content'],
						operation: ['generateArticle'],
					},
				},
				options: [
					{
						displayName: 'Focus',
						name: 'focus',
						type: 'string',
						default: '',
						description: 'Specific focus or angle for the article',
						routing: {
							send: {
								type: 'body',
								property: 'focus',
							},
						},
					},
					{
						displayName: 'Add Internal Links',
						name: 'add_internal_links',
						type: 'boolean',
						default: false,
						description: 'Whether to add internal links to the article',
						routing: {
							send: {
								type: 'body',
								property: 'add_internal_links',
							},
						},
					},
					{
						displayName: 'Add External Links',
						name: 'add_external_links',
						type: 'boolean',
						default: false,
						description: 'Whether to add external links to the article',
						routing: {
							send: {
								type: 'body',
								property: 'add_external_links',
							},
						},
					},
					{
						displayName: 'Project Website',
						name: 'project_website',
						type: 'string',
						default: '',
						description: 'Website URL for the project',
						routing: {
							send: {
								type: 'body',
								property: 'project_website',
							},
						},
					},
					{
						displayName: 'Project ID',
						name: 'project',
						type: 'string',
						default: '',
						description: 'ID of the project to associate the article with',
						routing: {
							send: {
								type: 'body',
								property: 'project',
							},
						},
					},
				],
			},

			// Fields for Video Generation
			{
				displayName: 'Video Mode',
				name: 'videoMode',
				type: 'options',
				default: 'singleVoice',
				options: [
					{
						name: 'Single Voice',
						value: 'singleVoice',
						description: 'One narrator throughout the video',
					},
					{
						name: 'Scenes',
						value: 'scenes',
						description: 'Multiple characters with scene-based script',
					},
					{
						name: 'Avatar',
						value: 'avatar',
						description: 'Virtual presenter mode',
					},
				],
				displayOptions: {
					show: {
						resource: ['video'],
						operation: ['generate'],
					},
				},
			},

			// Single Voice Mode Fields
			{
				displayName: 'Script',
				name: 'script',
				type: 'string',
				typeOptions: {
					rows: 5,
				},
				default: '',
				required: true,
				description: 'The script for the video',
				displayOptions: {
					show: {
						resource: ['video'],
						operation: ['generate'],
						videoMode: ['singleVoice'],
					},
				},
				routing: {
					send: {
						type: 'body',
						property: 'script',
					},
				},
			},
			{
				displayName: 'Voice ID',
				name: 'voice_id',
				type: 'string',
				default: '',
				required: true,
				description: 'ID of the voice to use',
				displayOptions: {
					show: {
						resource: ['video'],
						operation: ['generate'],
						videoMode: ['singleVoice'],
					},
				},
				routing: {
					send: {
						type: 'body',
						property: 'voice_id',
					},
				},
			},

			// Scenes Mode Fields
			{
				displayName: 'Script',
				name: 'scenesScript',
				type: 'string',
				typeOptions: {
					rows: 10,
				},
				default: '[characters] Alice, Bob [characters]\n[scene: Office]\nAlice: Hello Bob!\nBob: Hi Alice!\n[end]',
				required: true,
				description: 'Scene-based script with character dialogues',
				displayOptions: {
					show: {
						resource: ['video'],
						operation: ['generate'],
						videoMode: ['scenes'],
					},
				},
				routing: {
					send: {
						type: 'body',
						property: 'script',
					},
				},
			},

			// Avatar Mode Fields
			{
				displayName: 'Script',
				name: 'avatarScript',
				type: 'string',
				typeOptions: {
					rows: 5,
				},
				default: '',
				required: true,
				description: 'The script for the avatar to present',
				displayOptions: {
					show: {
						resource: ['video'],
						operation: ['generate'],
						videoMode: ['avatar'],
					},
				},
				routing: {
					send: {
						type: 'body',
						property: 'script',
					},
				},
			},
			{
				displayName: 'Avatar ID',
				name: 'avatar_id',
				type: 'string',
				default: '',
				required: true,
				description: 'ID of the avatar to use',
				displayOptions: {
					show: {
						resource: ['video'],
						operation: ['generate'],
						videoMode: ['avatar'],
					},
				},
				routing: {
					send: {
						type: 'body',
						property: 'avatar_id',
					},
				},
			},
			{
				displayName: 'Avatar Layout',
				name: 'avatar_layout',
				type: 'options',
				default: 'center',
				options: [
					{ name: 'Center', value: 'center' },
					{ name: 'Left', value: 'left' },
					{ name: 'Right', value: 'right' },
				],
				description: 'Layout position for the avatar',
				displayOptions: {
					show: {
						resource: ['video'],
						operation: ['generate'],
						videoMode: ['avatar'],
					},
				},
				routing: {
					send: {
						type: 'body',
						property: 'avatar_layout',
					},
				},
			},

			// ID fields for GET operations
			{
				displayName: 'Content ID',
				name: 'contentId',
				type: 'string',
				default: '',
				required: true,
				description: 'The ID of the content to retrieve',
				displayOptions: {
					show: {
						resource: ['content'],
						operation: ['get'],
					},
				},
			},
			{
				displayName: 'Video ID',
				name: 'videoId',
				type: 'string',
				default: '',
				required: true,
				description: 'The ID of the video to retrieve',
				displayOptions: {
					show: {
						resource: ['video'],
						operation: ['get'],
					},
				},
			},
			{
				displayName: 'Project ID',
				name: 'projectId',
				type: 'string',
				default: '',
				required: true,
				description: 'The ID of the project to retrieve',
				displayOptions: {
					show: {
						resource: ['project'],
						operation: ['get'],
					},
				},
			},

			// Query Parameters for Get Many operations
			{
				displayName: 'Return All',
				name: 'returnAll',
				type: 'boolean',
				default: false,
				description: 'Whether to return all results or use pagination',
				displayOptions: {
					show: {
						resource: ['content', 'video', 'project'],
						operation: ['getMany'],
					},
				},
			},
			{
				displayName: 'Limit',
				name: 'limit',
				type: 'number',
				default: 10,
				typeOptions: {
					minValue: 1,
					maxValue: 100,
				},
				description: 'Max number of results to return',
				displayOptions: {
					show: {
						resource: ['content', 'video', 'project'],
						operation: ['getMany'],
						returnAll: [false],
					},
				},
				routing: {
					send: {
						type: 'query',
						property: 'limit',
					},
				},
			},

			// Filters for Get Many operations
			{
				displayName: 'Filters',
				name: 'filters',
				type: 'collection',
				placeholder: 'Add Filter',
				default: {},
				displayOptions: {
					show: {
						resource: ['content', 'video', 'project'],
						operation: ['getMany'],
					},
				},
				options: [
					{
						displayName: 'Page',
						name: 'page',
						type: 'number',
						default: 1,
						description: 'Page number for pagination',
						routing: {
							send: {
								type: 'query',
								property: 'page',
							},
						},
					},
					{
						displayName: 'Search',
						name: 'search',
						type: 'string',
						default: '',
						description: 'Search term to filter results',
						routing: {
							send: {
								type: 'query',
								property: 'search',
							},
						},
					},
					{
						displayName: 'Status',
						name: 'status',
						type: 'options',
						default: '',
						options: [
							{ name: 'All', value: '' },
							{ name: 'Completed', value: 'completed' },
							{ name: 'Processing', value: 'processing' },
							{ name: 'Failed', value: 'failed' },
						],
						description: 'Filter by content status',
						displayOptions: {
							show: {
								'/resource': ['content'],
							},
						},
						routing: {
							send: {
								type: 'query',
								property: 'status',
							},
						},
					},
					{
						displayName: 'Type',
						name: 'type',
						type: 'options',
						default: '',
						options: [
							{ name: 'All', value: '' },
							{ name: 'Article', value: 'article' },
							{ name: 'Video', value: 'video' },
						],
						description: 'Filter by content type',
						displayOptions: {
							show: {
								'/resource': ['content'],
							},
						},
						routing: {
							send: {
								type: 'query',
								property: 'type',
							},
						},
		default: 'single_voice',
		options: [
			{ name: 'Single Voice', value: 'single_voice', description: 'Simple video with one narrator voice' },
			{ name: 'Scenes', value: 'scenes', description: 'Multi-character video with scene-based script' },
			{ name: 'Avatar', value: 'avatar', description: 'Video with AI avatar presenter' },
		],
		description: 'Video generation mode',
		displayOptions: {
			show: {
				resource: ['video'],
				operation: ['generate'],
			},
		},
		routing: {
			send: {
				type: 'body',
				property: 'mode',
			},
		},
	},
	{
		displayName: 'Video Script',
		name: 'video_script',
		type: 'string',
		typeOptions: {
			rows: 8,
		},
		required: true,
		default: '',
		description: 'The script for the video. Line breaks must be indicated with \\n. For scenes mode, must follow specific format with [characters], [scene:] and [end] blocks.',
		displayOptions: {
			show: {
				resource: ['video'],
				operation: ['generate'],
			},
		},
		routing: {
			send: {
				type: 'body',
				property: 'video_script',
			},
		},
	},
	{
		displayName: 'Aspect Ratio',
		name: 'aspect_ratio',
		type: 'options',
		required: true,
		default: '16:9',
		options: [
			{ name: '16:9 (Landscape)', value: '16:9' },
			{ name: '9:16 (Portrait)', value: '9:16' },
		],
		description: 'The aspect ratio for the video',
		displayOptions: {
			show: {
				resource: ['video'],
				operation: ['generate'],
			},
		},
		routing: {
			send: {
				type: 'body',
				property: 'aspect_ratio',
			},
		},
	},
	{
		displayName: 'Animation Type',
		name: 'animation_type',
		type: 'options',
		required: true,
		default: 'moving_image',
		options: [
			{ name: 'Moving Image (Ken Burns Effect)', value: 'moving_image' },
			{ name: 'AI Video (AI-generated Animation)', value: 'ai_video' },
		],
		description: 'Animation type. Note: ai_video is not compatible with scenes mode.',
		displayOptions: {
			show: {
				resource: ['video'],
				operation: ['generate'],
			},
		},
		routing: {
			send: {
				type: 'body',
				property: 'animation_type',
			},
		},
	},
	{
		displayName: 'Voice ID',
		name: 'voice_id',
		type: 'string',
		required: true,
		default: '',
		description: 'The ID of the voice to be used for narration',
		displayOptions: {
			show: {
				resource: ['video'],
				operation: ['generate'],
				mode: ['single_voice', 'avatar'],
			},
		},
		routing: {
			send: {
				type: 'body',
				property: 'voice_id',
			},
		},
	},
	{
		displayName: 'Voices',
		name: 'voices',
		type: 'fixedCollection',
		typeOptions: {
			multipleValues: true,
		},
		default: { voiceMapping: [] },
		description: 'Voice mapping for characters (max 8 characters)',
		displayOptions: {
			show: {
				resource: ['video'],
				operation: ['generate'],
				mode: ['scenes'],
			},
		},
		options: [
			{
				name: 'voiceMapping',
				displayName: 'Voice Mappings',
				values: [
					{
						displayName: 'Character',
						name: 'character',
						type: 'string',
						default: '',
						description: 'Character name (must match script)',
					},
					{
						displayName: 'Voice ID',
						name: 'voice_id',
						type: 'string',
						default: '',
						description: 'Voice ID for this character',
					},
				],
			},
		],
		routing: {
			send: {
				type: 'body',
				property: 'voices',
				propertyInDotNotation: false,
			},
		},
	},
	{
		displayName: 'Avatar Layout',
		name: 'avatar_layout',
		type: 'options',
		default: 'center',
		options: [
			{ name: 'Center', value: 'center' },
			{ name: 'Left', value: 'left' },
			{ name: 'Right', value: 'right' },
		],
		description: 'Layout position for the avatar',
		displayOptions: {
			show: {
				resource: ['video'],
				operation: ['generate'],
				mode: ['avatar'],
			},
		},
		routing: {
			send: {
				type: 'body',
				property: 'avatar_layout',
			},
		},
	},
	{
		displayName: 'Avatar ID',
		name: 'avatar_id',
		type: 'string',
		default: '',
		description: 'The ID of the avatar to be used',
		displayOptions: {
			show: {
				resource: ['video'],
				operation: ['generate'],
				mode: ['avatar'],
			},
		},
		routing: {
			send: {
				type: 'body',
				property: 'avatar_id',
			},
		},
	},
	// ID fields for GET operations
	{
		displayName: 'Content ID',
		name: 'contentId',
		type: 'string',
		default: '',
		required: true,
		description: 'The ID of the content to retrieve',
		displayOptions: {
			show: {
				resource: ['content'],
				operation: ['get'],
			},
		},
	},
	{
		displayName: 'Video ID',
		name: 'videoId',
		type: 'string',
		default: '',
		required: true,
		description: 'The ID of the video to retrieve',
		displayOptions: {
			show: {
				resource: ['video'],
				operation: ['get'],
			},
		},
	},
	{
		displayName: 'Project ID',
		name: 'projectId',
		type: 'string',
		default: '',
		required: true,
		description: 'The ID of the project to retrieve',
		displayOptions: {
			show: {
				resource: ['project'],
				operation: ['get'],
			},
		},
	},

	// Query Parameters for Get Many operations
	{
		displayName: 'Return All',
		name: 'returnAll',
		type: 'boolean',
		default: false,
		description: 'Whether to return all results or use pagination',
		displayOptions: {
			show: {
				resource: ['content', 'video', 'project'],
				operation: ['getMany'],
			},
		},
	},
	{
		displayName: 'Limit',
		name: 'limit',
		type: 'number',
		default: 10,
		typeOptions: {
			minValue: 1,
			maxValue: 100,
		},
		description: 'Max number of results to return',
		displayOptions: {
			show: {
				resource: ['content', 'video', 'project'],
				operation: ['getMany'],
				returnAll: [false],
			},
		},
		routing: {
			send: {
				type: 'query',
				property: 'limit',
			},
		},
	},

	// Filters for Get Many operations
	{
		displayName: 'Filters',
		name: 'filters',
		type: 'collection',
		placeholder: 'Add Filter',
		default: {},
		displayOptions: {
			show: {
				resource: ['content', 'video', 'project'],
				operation: ['getMany'],
			},
		},
		options: [
			{
				displayName: 'Page',
				name: 'page',
				type: 'number',
				default: 1,
				description: 'Page number for pagination',
				routing: {
					send: {
						type: 'query',
						property: 'page',
					},
				},
			},
			{
				displayName: 'Search',
				name: 'search',
				type: 'string',
				default: '',
				description: 'Search term to filter results',
				routing: {
					send: {
						type: 'query',
						property: 'search',
					},
				},
			},
			{
				displayName: 'Status',
				name: 'status',
				type: 'options',
				default: '',
				options: [
					{ name: 'All', value: '' },
					{ name: 'Completed', value: 'completed' },
					{ name: 'Processing', value: 'processing' },
					{ name: 'Failed', value: 'failed' },
				],
				description: 'Filter by content status',
				displayOptions: {
					show: {
						'/resource': ['content'],
					},
				},
				routing: {
					send: {
						type: 'query',
						property: 'status',
					},
				},
			},
			{
				displayName: 'Type',
				name: 'type',
				type: 'options',
				default: '',
				options: [
					{ name: 'All', value: '' },
					{ name: 'Article', value: 'article' },
					{ name: 'Video', value: 'video' },
				],
				description: 'Filter by content type',
				displayOptions: {
					show: {
						'/resource': ['content'],
					},
				},
				routing: {
					send: {
						type: 'query',
						property: 'type',
					},
				},
			},
		],
	},

	// Video Generation Fields
	{
		displayName: 'Mode',
		name: 'mode',
		type: 'options',
		required: true,
		default: 'single_voice',
		options: [
			{ name: 'Single Voice', value: 'single_voice', description: 'Simple video with one narrator voice' },
			{ name: 'Scenes', value: 'scenes', description: 'Multi-character video with scene-based script' },
			{ name: 'Avatar', value: 'avatar', description: 'Video with AI avatar presenter' },
		],
		description: 'Video generation mode',
		displayOptions: {
			show: {
				resource: ['video'],
				operation: ['generate'],
			},
		},
		routing: {
			send: {
				type: 'body',
				property: 'mode',
			},
		},
	},
	{
		displayName: 'Video Script',
		name: 'video_script',
		type: 'string',
		typeOptions: {
			rows: 8,
		},
		required: true,
		default: '',
		description: 'The script for the video. Line breaks must be indicated with \\n. For scenes mode, must follow specific format with [characters], [scene:] and [end] blocks.',
		displayOptions: {
			show: {
				resource: ['video'],
				operation: ['generate'],
			},
		},
		routing: {
			send: {
				type: 'body',
				property: 'video_script',
			},
		},
	},
	{
		displayName: 'Aspect Ratio',
		name: 'aspect_ratio',
		type: 'options',
		required: true,
		default: '16:9',
		options: [
			{ name: '16:9 (Landscape)', value: '16:9' },
			{ name: '9:16 (Portrait)', value: '9:16' },
		],
		description: 'The aspect ratio for the video',
		displayOptions: {
			show: {
				resource: ['video'],
				operation: ['generate'],
			},
		},
		routing: {
			send: {
				type: 'body',
				property: 'aspect_ratio',
			},
		},
	},
	{
		displayName: 'Animation Type',
		name: 'animation_type',
		type: 'options',
		required: true,
		default: 'moving_image',
		options: [
			{ name: 'Moving Image (Ken Burns Effect)', value: 'moving_image' },
			{ name: 'AI Video (AI-generated Animation)', value: 'ai_video' },
		],
		description: 'Animation type. Note: ai_video is not compatible with scenes mode.',
		displayOptions: {
			show: {
				resource: ['video'],
				operation: ['generate'],
			},
		},
		routing: {
			send: {
				type: 'body',
				property: 'animation_type',
			},
		},
	},
	{
		displayName: 'Voice ID',
		name: 'voice_id',
		type: 'string',
		required: true,
		default: '',
		description: 'The ID of the voice to be used for narration',
		displayOptions: {
			show: {
				resource: ['video'],
				operation: ['generate'],
				mode: ['single_voice', 'avatar'],
			},
		},
		routing: {
			send: {
				type: 'body',
				property: 'voice_id',
			},
		},
	},
	{
		displayName: 'Voices',
		name: 'voices',
		type: 'fixedCollection',
		typeOptions: {
			multipleValues: true,
		},
		default: { voiceMapping: [] },
		description: 'Voice mapping for characters (max 8 characters)',
		displayOptions: {
			show: {
				resource: ['video'],
				operation: ['generate'],
				mode: ['scenes'],
			},
		},
		options: [
			{
				name: 'voiceMapping',
				displayName: 'Voice Mappings',
				values: [
					{
						displayName: 'Character',
						name: 'character',
						type: 'string',
						default: '',
						description: 'Character name (must match script)',
					},
					{
						displayName: 'Voice ID',
						name: 'voice_id',
						type: 'string',
						default: '',
						description: 'Voice ID for this character',
					},
				],
			},
		],
		routing: {
			send: {
				type: 'body',
				property: 'voices',
				propertyInDotNotation: false,
			},
		},
	},
	{
		displayName: 'Avatar ID',
		name: 'avatar_id',
		type: 'string',
		default: '',
		description: 'The ID of the avatar to be used',
		displayOptions: {
			show: {
				resource: ['video'],
				operation: ['generate'],
				mode: ['avatar'],
			},
		},
		routing: {
			send: {
				type: 'body',
				property: 'avatar_id',
			},
		},
	},
	{
		displayName: 'Avatar Layout',
		name: 'avatar_layout',
		type: 'options',
		default: 'center',
		options: [
			{ name: 'Center', value: 'center' },
			{ name: 'Left', value: 'left' },
			{ name: 'Right', value: 'right' },
		],
		description: 'Layout position for the avatar',
		displayOptions: {
			show: {
				resource: ['video'],
				operation: ['generate'],
				mode: ['avatar'],
			},
		},
		routing: {
			send: {
				type: 'body',
				property: 'avatar_layout',
			},
		},
	},
	],
	};
}